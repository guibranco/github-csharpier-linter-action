name: 'CSharpier Linter Action'
description: 'A reusable GitHub Action to check C# code formatting using CSharpier.'
branding:
  icon: "check"
  color: "green"
inputs: {}
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Dotnet tool restore
      shell: bash
      run: dotnet tool restore

    - name: Ensure CSharpier is installed and the correct version
      shell: bash
      run: |
        set -e

        # Check if csharpier is available
        if ! dotnet csharpier --version &> /dev/null; then
          echo "❌ Error: CSharpier must be installed as a dotnet tool in the repository."
          exit 1
        fi

        # Get installed version
        installed_version=$(dotnet csharpier --version)
        required_version="1.0.1"

        echo "✅ Detected CSharpier version: $installed_version"

        # Function to compare versions
        version_gte() {
          # returns true if $1 >= $2
          [ "$1" = "$2" ] && return 0

          local IFS=.
          local i ver1=($1) ver2=($2)

          # Fill empty fields in ver1 with zeros
          for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
            ver1[i]=0
          done

          for ((i=0; i<${#ver1[@]}; i++)); do
            if [[ -z ${ver2[i]} ]]; then
              # fill empty fields in ver2 with zeros
              ver2[i]=0
            fi
            if ((10#${ver1[i]} > 10#${ver2[i]})); then
              return 0
            fi
            if ((10#${ver1[i]} < 10#${ver2[i]})); then
              return 1
            fi
          done
          return 0
        }

        # Compare versions
        if ! version_gte "$installed_version" "$required_version"; then
          echo "❌ Error: CSharpier version must be >= $required_version. Found $installed_version."
          exit 1
        fi

    - name: CSharpier format check
      id: csharpier
      shell: bash
      run: |
        output=$(dotnet csharpier check . || true)
        echo "$output" > csharpier-output.txt

        echo "$output"

        current_file=""
        current_line="1"

        # Create a temp file for the summary
        summary_file="csharpier-summary.md"
        echo "## 🔥 Formatting issues detected" > "$summary_file"
        echo "" >> "$summary_file"
        echo "| File | Line |" >> "$summary_file"
        echo "|:-----|:----:|" >> "$summary_file"

        while IFS= read -r line; do
          if [[ "$line" =~ ^Error\ (.+)\ -\ Was\ not\ formatted\.$ ]]; then
            current_file="${BASH_REMATCH[1]}"
            current_line="1"
          elif [[ "$line" =~ Expected:\ Around\ Line\ ([0-9]+) ]]; then
            current_line="${BASH_REMATCH[1]}"
            echo "::warning file=$current_file,line=$current_line::File is not formatted correctly. Run 'dotnet csharpier .' to fix."
            echo "| $current_file | $current_line |" >> "$summary_file"
          fi
        done <<< "$output"

        if grep -q '^Error ' csharpier-output.txt; then
          echo "" >> "$summary_file"
          echo "⚡ Please run \`dotnet csharpier .\` locally to fix the formatting issues." >> "$summary_file"
          cat "$summary_file" >> "$GITHUB_STEP_SUMMARY"
          echo "issues_detected=true" >> $GITHUB_ENV
        else
          echo "issues_detected=false" >> $GITHUB_ENV
        fi

    - name: Find existing comment
      if: env.issues_detected == 'true'
      id: find-comment
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: github-actions[bot]
        body-includes: 🔥 Formatting issues detected

    - name: Create or update PR comment
      if: env.issues_detected == 'true'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-path: csharpier-summary.md
        edit-mode: replace
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
